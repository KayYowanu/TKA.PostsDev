@using TKA.Posts.Services
@using TKA.Posts.Models

@namespace TKA.Posts
@inherits ModuleBase
@inject IPostsService PostsService
@inject NavigationManager NavigationManager

@if (_Postss == null)
{
<p><em>Loading...</em></p> }
            else
            {
<ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Create Post" />
                <br />
                                <br />
                                                @if (@_Postss.Count != 0)
                                                {
                                <Pager Items="@_Postss">
                                    <Header>
                                        <th style="width: 1px;">&nbsp;</th>
                                        <th style="width: 1px;">&nbsp;</th>
                                        <th>Name</th>
                                    </Header>
                                    <Row>
                                        <td><ActionLink Action="Edit" Parameters="@($"id=" + context.PostsId.ToString())" /></td>
                                        <td><ActionDialog Header="Delete Posts" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Posts?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
                                        <td>@context.Name</td>
                                    </Row>
                                </Pager> }
                                                else
                                                {
                                <p>No Postss To Display</p>}}

<!-- The content below is for informational purposes only and can be safely removed -->
<!--
<hr />
Posts Module Created Successfully. Use Edit Mode To Add A Posts. You Can Access The Files At The Following Locations:<br /><br />
D:\Projects\Oqtane\TKA.Posts\Client\<br />
- TKA.Posts.Client.csproj - client project<br />
- _Imports.razor - global imports for module components<br />
- Edit.razor - component for adding or editing content<br />
- Index.razor - main component for your module **the content you are reading is in this file**<br />
- ModuleInfo.cs - implements IModule interface to provide configuration settings for your module<br />
- Settings.razor - component for managing module settings<br />
- Services\IPostsService.cs - interface for defining service API methods<br />
- Services\PostsService.cs - implements service API interface methods<br /><br />
D:\Projects\Oqtane\TKA.Posts\Package\<br />
- TKA.Posts.nuspec - nuget manifest for packaging module<br />
- TKA.Posts.Package.csproj - packaging project<br />
- debug.cmd - copies assemblies to Oqtane bin folder when in Debug mode<br />
- release.cmd - creates nuget package and deploys to Oqtane wwwroot/modules folder when in Release mode<br /><br />
D:\Projects\Oqtane\TKA.Posts\Server\<br />
- TKA.Posts.Server.csproj - server project<br />
- Controllers\PostsController.cs - API methods implemented using a REST pattern<br />
- Manager\PostsManager.cs - implements optional module interfaces for features such as import/export of content<br />
- Repository\IPostsRepository.cs - interface for defining repository methods<br />
- Repository\PostsRespository.cs - implements repository interface methods for data access using EF Core<br />
- Repository\PostsContext.cs - provides a DB Context for data access<br />
- Scripts\TKA.Posts.1.0.0.sql - database schema definition script<br />
- Scripts\TKA.Posts.Uninstall.sql - database uninstall script<br />
- wwwroot\Module.css - module style sheet<br /><br />
D:\Projects\Oqtane\TKA.Posts\Shared\<br />
- TKA.Posts.csproj - shared project<br />
- Models\Posts.cs - model definition<br /><br />
    -->
<!-- The content above is for informational purposes only and can be safely removed -->

@code { public override List<Resource> Resources => new List<Resource>()
        {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

            List<Posts> _Postss;

            protected override async Task OnInitializedAsync()
            {
                try
                {
                    _Postss = await PostsService.GetPostssAsync(ModuleState.ModuleId);
                }
                catch (Exception ex)
                {
                    await logger.LogError(ex, "Error Loading Posts {Error}", ex.Message);
                    AddModuleMessage("Error Loading Posts", MessageType.Error);
                }
            }

            private async Task Delete(Posts Posts)
            {
                try
                {
                    await PostsService.DeletePostsAsync(Posts.PostsId, ModuleState.ModuleId);
                    await logger.LogInformation("Posts Deleted {Posts}", Posts);
                    _Postss = await PostsService.GetPostssAsync(ModuleState.ModuleId);
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    await logger.LogError(ex, "Error Deleting Posts {Posts} {Error}", Posts, ex.Message);
                    AddModuleMessage("Error Deleting Posts", MessageType.Error);
                }
            } }